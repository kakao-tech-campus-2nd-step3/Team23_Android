name: Dev CI

on:
  pull_request:
    branches: [ "Master", "Develop" ]

jobs:
  # 유닛 테스트
  test:
    name: Lint and Unit Tests
    runs-on: ubuntu-latest

    # PR 코멘트 및 리뷰 작성을 위한 권한 설정
    permissions:
      checks: write
      pull-requests: write
      contents: read
      issues: read
      actions: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

        # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Secret Keys
        run: |
          echo "KAKAO_REST_API_KEY=\"$KAKAO_REST_API_KEY\"" >> local.properties
          echo "KAKAO_API_KEY=\"$KAKAO_API_KEY\"" >> local.properties
          echo "KAKAO_API_KEY_MANIFEST=\"$KAKAO_API_KEY_MANIFEST\"" >> local.properties
          echo "KAKAO_API_URL=\"$KAKAO_API_URL\"" >> local.properties
          echo "KAKAO_AUTH_URL=\"$KAKAO_AUTH_URL\"" >> local.properties
          echo "SERVICE_URL=\"$SERVICE_URL\"" >> local.properties
          echo "KEYSTORE_NAME=\"$KEYSTORE_NAME\"" >> local.properties
        shell: bash
        env:
          KAKAO_REST_API_KEY: ${{secrets.KAKAO_REST_API_KEY}}
          KAKAO_API_KEY: ${{secrets.KAKAO_API_KEY}}
          KAKAO_API_KEY_MANIFEST: ${{secrets.KAKAO_API_KEY_MANIFEST}}
          KAKAO_API_URL: ${{secrets.KAKAO_API_URL}}
          KAKAO_AUTH_URL: ${{secrets.KAKAO_AUTH_URL}}
          SERVICE_URL: ${{secrets.SERVICE_URL}}
          KEYSTORE_NAME: ${{secrets.KEYSTORE_NAME}}

        # Gradle 스크립트 실행을 위한 권한 설정
      - name: Grant Execute Permission for Gradlew
        run: chmod +x gradlew

        # Convention Check 후 PR 리뷰로 결과 전송
      - name: Run Ktlint and Publish Test Results
        uses: ScaCap/action-ktlint@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          fail_on_error: true
          level: warning
          ktlint_version: 1.3.1

        # 유닛 테스트 후 PR 코멘트로 결과 전송
      - name: Run Unit Test
        if: success() || failure()
        run: ./gradlew test
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: success() || failure()
        with:
          check_name: "Test Results (Unit Tests)"
          junit_files: '**/build/test-results/*/TEST-*.xml'

  # 계측 테스트
  instrumented-test:
    name: Android Instrumented Tests on Android (API level ${{ matrix.api-level }})
    runs-on: ubuntu-latest

    # PR 코멘트 작성을 위한 권한 설정
    permissions:
      checks: write
      pull-requests: write
      contents: read
      issues: read
      actions: read

    # 테스트 할 안드로이드 API 설정
    strategy:
      matrix:
        api-level: [ 29 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

        # 안드로이드 하드웨어 가속을 위한 환경 설정
      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

        # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

        # Gradle 스크립트 실행을 위한 권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

        # AVD 캐시미스 발생 시 캐싱을 위한 AVD 스냅샷 생성
      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          profile: Nexus 6
          script: echo "Generated AVD snapshot for caching."

        # 계측 테스트 후 PR 코멘트로 결과 전송
      - name: Run Instrumented Test
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          profile: Nexus 6
          script: ./gradlew connectedCheck

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: success() || failure()
        with:
          check_name: "Test Results (Instrumented Tests)"
          files: '**/build/outputs/androidTest-results/connected/*/*.xml'
